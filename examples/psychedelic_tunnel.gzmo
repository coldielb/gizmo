// Psychedelic Tunnel - A mind-bending journey through mathematical space
// This animation showcases the full power of the Gizmo language:
// - Complex mathematical expressions with multiple trigonometric functions
// - Conditional logic for creating intricate patterns
// - Time-based animation with smooth transitions
// - Layered effects combining multiple visual elements

frames tunnel_sequence = [];

// Create 80 frames for a smooth, hypnotic loop
repeat 80 times do
    frame tunnel_frame = pattern(64, 64) {
        // Center coordinates for our tunnel
        center_x = 32;
        center_y = 32;
        
        // Calculate distance and angle from center
        dx = col - center_x;
        dy = row - center_y;
        distance = sqrt(dx * dx + dy * dy);
        angle = atan2(dy, dx);
        
        // Time-based animation variables
        time_offset = time * 0.05;  // Slow, steady progression
        fast_time = time * 0.2;     // Faster oscillations
        ultra_fast = time * 0.8;    // Rapid fluctuations
        
        // Create the tunnel effect with perspective distortion
        tunnel_depth = 60.0 / (distance + 1);  // Creates the 3D tunnel illusion
        tunnel_rings = sin(tunnel_depth + time_offset * 3) * 0.5 + 0.5;
        
        // Add rotating spiral arms for visual complexity
        spiral_arms = sin(angle * 6 + time_offset * 4) * 0.5 + 0.5;
        
        // Plasma effect layer 1: slow, large waves
        plasma1 = sin(dx * 0.1 + time_offset) * 
                 cos(dy * 0.1 - time_offset) * 0.3;
        
        // Plasma effect layer 2: medium frequency
        plasma2 = sin(distance * 0.2 + fast_time) * 
                 sin(angle * 4 - fast_time) * 0.3;
        
        // Plasma effect layer 3: high frequency detail
        plasma3 = sin(dx * 0.3 + dy * 0.3 + ultra_fast) * 0.2;
        
        // Create pulsing center core
        center_pulse = distance < 15 ? 
                      (sin(ultra_fast * 2) * 0.5 + 0.5) : 0;
        
        // Add radiating energy beams
        energy_beams = 0;
        if distance > 20 and distance < 50 then
            beam_angle = floor(angle * 8 / (2 * 3.14159));  // 8 beams
            beam_intensity = sin(distance * 0.3 - time_offset * 6);
            if beam_angle % 2 == 0 then
                energy_beams = beam_intensity * 0.4;
            end;
        end;
        
        // Outer ring distortion effect
        outer_distortion = 0;
        if distance > 45 then
            distortion_wave = sin(angle * 12 + time_offset * 8) * 
                             cos(distance * 0.1 - time_offset * 2);
            outer_distortion = distortion_wave * 0.3;
        end;
        
        // Combine all effects with weighted mixing
        final_intensity = tunnel_rings * 0.4 +
                         spiral_arms * 0.25 +
                         plasma1 + plasma2 + plasma3 +
                         center_pulse * 0.6 +
                         energy_beams +
                         outer_distortion;
        
        // Add some deterministic variation for organic feel
        chaos_factor = sin(dx * 0.7 + dy * 0.3 + ultra_fast) * 0.05;
        final_intensity = final_intensity + chaos_factor;
        
        // Create dynamic threshold that pulsates
        base_threshold = 0.4;
        pulse_threshold = sin(time_offset * 5) * 0.15;
        distance_threshold = sin(distance * 0.1) * 0.1;
        
        dynamic_threshold = base_threshold + pulse_threshold + distance_threshold;
        
        // Final pixel decision with some edge enhancement
        pixel_on = 0;
        if final_intensity > dynamic_threshold then
            pixel_on = 1;
        end;
        
        // Add edge enhancement for sharper details
        if pixel_on == 0 and final_intensity > dynamic_threshold - 0.1 then
            edge_enhance = sin(dx * 0.5) * cos(dy * 0.5) * 
                          sin(ultra_fast * 3);
            if edge_enhance > 0.3 then
                pixel_on = 1;
            end;
        end;
        
        return pixel_on;
    };
    
    add_frame(tunnel_sequence, tunnel_frame);
end;

// Run at medium speed for mesmerizing effect
loop_speed(tunnel_sequence, 60);